Object.defineProperty(exports, "__esModule", { value: true });
var action_1 = require("../actions/action");
exports.loginReducer = function (state, action) {
    if (state === void 0) { state = {}; }
    switch (action.type) {
        case action_1.LOGIN_USER:
            return Object.assign({}, state, action.payload);
        case action_1.LOGOUT_USER:
            return Object.assign({}, state, {});
        default:
            return state;
    }
};
exports.mapReducer = function (state, action) {
    if (state === void 0) { state = []; }
    switch (action.type) {
        case action_1.MARKER_RENEW:
            return state = action.payload;
        case action_1.MARKER_ADD:
            return state.concat([action.payload]);
        case action_1.MARKER_REMOVE:
            return state.filter(function (marker) { return marker.id !== action.payload; });
        case action_1.MARKER_LEAVE:
            return state.map(function (marker) {
                if (marker.id !== action.payload.id) {
                    return marker;
                }
                return Object.assign({}, marker, action.payload);
            });
        case action_1.MARKER_JOIN:
            return state.map(function (marker) {
                if (marker.id !== action.payload.joinId) {
                    return marker;
                }
                return Object.assign({}, marker, action.payload.event);
            });
        default:
            return state;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyUmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1hcmtlclJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUdBLDRDQVEyQjtBQUNkLFFBQUEsWUFBWSxHQUF1QixVQUFDLEtBQ2hELEVBQUUsTUFBYztJQURnQyxzQkFBQSxFQUFBLFVBQ2hEO0lBQ0csTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbEIsS0FBSyxtQkFBVTtZQUNYLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ25ELEtBQUssb0JBQVc7WUFDWCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDO1lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNyQixDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRVcsUUFBQSxVQUFVLEdBQXVCLFVBQUMsS0FBVSxFQUN2RCxNQUFjO0lBRCtCLHNCQUFBLEVBQUEsVUFBVTtJQUVyRCxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsQixLQUFLLHFCQUFZO1lBQ2IsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ2xDLEtBQUssbUJBQVU7WUFDWCxNQUFNLENBQUssS0FBSyxTQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUU7UUFDdEMsS0FBSyxzQkFBYTtZQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUMsT0FBTyxFQUE1QixDQUE0QixDQUFDLENBQUM7UUFDaEUsS0FBSyxxQkFBWTtZQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsTUFBTTtnQkFDbkIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ2xCLENBQUM7Z0JBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckQsQ0FBQyxDQUFDLENBQUM7UUFDUCxLQUFLLG9CQUFXO1lBQ1osTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQSxNQUFNO2dCQUNuQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDdEMsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDbEIsQ0FBQztnQkFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFDUDtZQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDckIsQ0FBQztBQUNMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7bWFya2VyfSBmcm9tICcuLi9jb21wb25lbnRzL2ludGVyZmFjZS9tYXJrZXInO1xyXG4vLyBjb25zdCBmYWtlRXZlbnQgPSByZXF1aXJlKCcuL2Zha2VldmVudC5qc29uJyk7XHJcbmltcG9ydCB7IEFjdGlvblJlZHVjZXIsIEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcclxuaW1wb3J0IHtcclxuICAgIE1BUktFUl9SRU5FVyxcclxuICAgIE1BUktFUl9BREQsXHJcbiAgICBNQVJLRVJfUkVNT1ZFLFxyXG4gICAgTUFSS0VSX0xFQVZFLFxyXG4gICAgTUFSS0VSX0pPSU4sXHJcbiAgICBMT0dJTl9VU0VSLFxyXG4gICAgTE9HT1VUX1VTRVJcclxufSBmcm9tICcuLi9hY3Rpb25zL2FjdGlvbic7XHJcbmV4cG9ydCBjb25zdCBsb2dpblJlZHVjZXI6IEFjdGlvblJlZHVjZXI8YW55PiA9IChzdGF0ZSA9IHtcclxufSwgYWN0aW9uOiBBY3Rpb24pID0+IHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIExPR0lOX1VTRVI6XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwgYWN0aW9uLnBheWxvYWQpXHJcbiAgICAgICAgY2FzZSBMT0dPVVRfVVNFUjpcclxuICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge30pO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBtYXBSZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPGFueT4gPSAoc3RhdGUgPSBbXVxyXG4sIGFjdGlvbjogQWN0aW9uKSA9PiB7XHJcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XHJcbiAgICAgICAgY2FzZSBNQVJLRVJfUkVORVc6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgICAgIGNhc2UgTUFSS0VSX0FERDpcclxuICAgICAgICAgICAgcmV0dXJuIFsuLi5zdGF0ZSwgYWN0aW9uLnBheWxvYWRdO1xyXG4gICAgICAgIGNhc2UgTUFSS0VSX1JFTU9WRTpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmZpbHRlcihtYXJrZXIgPT4gbWFya2VyLmlkICE9PSBhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgY2FzZSBNQVJLRVJfTEVBVkU6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5tYXAobWFya2VyID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChtYXJrZXIuaWQgIT09IGFjdGlvbi5wYXlsb2FkLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBtYXJrZXIsIGFjdGlvbi5wYXlsb2FkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgY2FzZSBNQVJLRVJfSk9JTjpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLm1hcChtYXJrZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hcmtlci5pZCAhPT0gYWN0aW9uLnBheWxvYWQuam9pbklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBtYXJrZXIsIGFjdGlvbi5wYXlsb2FkLmV2ZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xyXG4gICAgfVxyXG59O1xyXG4iXX0=